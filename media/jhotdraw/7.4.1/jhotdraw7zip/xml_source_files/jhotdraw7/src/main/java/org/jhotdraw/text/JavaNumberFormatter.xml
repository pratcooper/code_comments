<?xml version="1.0" ?>
<srcfile name="JavaNumberFormatter.java" file_path="/Users/valerio/Research/Code/Source Code Comments Classification/comments_classification/media/jhotdraw/7.4.1/jhotdraw7zip/extracted/jhotdraw7/src/main/java/org/jhotdraw/text/JavaNumberFormatter.java" >
 <node name="COMPILATION_UNIT" line="0" instruction_class="COMPILATION_UNIT" instruction="COMPILATION_UNIT">
   <node name="PACKAGE_DECLARATION" line="0" instruction_class="KEYWORD" instruction="PACKAGE_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="org" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="jhotdraw" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="text" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="SINGLE_TYPE_IMPORT_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="java" line="16" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="text" line="16" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="ParseException" line="16" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="SINGLE_TYPE_IMPORT_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
           <node name="javax" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="swing" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <node name="JFormattedTextField" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="AbstractFormatterFactory" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="SINGLE_TYPE_IMPORT_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
           <node name="javax" line="18" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="swing" line="18" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <node name="text" line="18" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="DefaultFormatter" line="18" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="SINGLE_TYPE_IMPORT_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
           <node name="javax" line="19" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="swing" line="19" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <node name="text" line="19" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="DefaultFormatterFactory" line="19" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <class_statement_node name="CLASS_DECLARATION" line="0" instruction_class="CLASS_DECLARATION" instruction="CLASS_KEYWORD">
     <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
       <node name="public" line="28" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
       </node>
     </node>
     <node name="JavaNumberFormatter" line="28" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
     </node>
     <node name="extends" line="28" instruction_class="KEYWORD" instruction="INHERITANCE_KEYWORD">
       <node name="DefaultFormatter" line="28" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
       </node>
     </node>
     <node name="CLASS_BODY" line="0" instruction_class="CLASS_BODY" instruction="CLASS_BODY">
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="33" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="double" line="33" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="scaleFactor" line="33" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="1d" line="33" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="34" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="34" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="allowsNullValue" line="34" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="34" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="35" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Comparable" line="35" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="min" line="35" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="36" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Comparable" line="36" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="max" line="36" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="37" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="37" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="appendsDotZero" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="true" line="37" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="44" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="JavaNumberFormatter" line="44" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
           <node name="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION" line="0" instruction_class="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION" instruction="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION">
             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
             </node>
           </node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="51" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="JavaNumberFormatter" line="51" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="51" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="min" line="51" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="51" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="max" line="51" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="51" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="scaleFactor" line="51" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
           <node name="ALTERNATE_CONSTRUCTOR_INVOCATION" line="0" instruction_class="ALTERNATE_CONSTRUCTOR_INVOCATION" instruction="ALTERNATE_CONSTRUCTOR_INVOCATION">
             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
               <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                 <node name="min" line="52" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="max" line="52" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="scaleFactor" line="52" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="false" line="52" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                 </node>
                 <node name="true" line="52" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                 </node>
               </node>
             </node>
           </node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="58" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="JavaNumberFormatter" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="58" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="min" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="58" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="max" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="58" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="scaleFactor" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="58" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="allowsNullValue" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="58" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="appendsDotZero" line="58" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
           <node name="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION" line="0" instruction_class="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION" instruction="UNQUALIFIED_SUPERCLASS_CONSTRUCTOR_INVOCATION">
             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
             </node>
           </node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setMinimum" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="min" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setMaximum" line="61" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="max" line="61" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setScaleFactor" line="62" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="scaleFactor" line="62" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setAllowsNullValue" line="63" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="allowsNullValue" line="63" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setAppendsDotZero" line="64" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="appendsDotZero" line="64" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="setOverwriteMode" line="65" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="false" line="65" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="77" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setMinimum" line="77" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Comparable" line="77" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="minimum" line="77" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="78" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="78" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="==" line="78" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="getValueClass" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="null" line="78" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
               <node name="!=" line="78" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="minimum" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="null" line="78" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="setValueClass" line="79" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                           <node name="minimum" line="79" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="getClass" line="79" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="81" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="min" line="81" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="minimum" line="81" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="89" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Comparable" line="89" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="getMinimum" line="89" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="90" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="min" line="90" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="102" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setMaximum" line="102" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Comparable" line="102" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="max" line="102" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="103" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="103" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="==" line="103" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="getValueClass" line="103" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="null" line="103" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
               <node name="!=" line="103" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="max" line="103" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="null" line="103" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="setValueClass" line="104" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                           <node name="max" line="104" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="getClass" line="104" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="106" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                 </node>
                 <node name="max" line="106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="max" line="106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="114" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Comparable" line="114" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="getMaximum" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="115" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="max" line="115" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="123" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setScaleFactor" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="123" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="newValue" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="124" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="scaleFactor" line="124" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="newValue" line="124" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="130" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="double" line="130" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getScaleFactor" line="130" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="131" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="scaleFactor" line="131" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="139" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setAllowsNullValue" line="139" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="139" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="newValue" line="139" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="140" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="allowsNullValue" line="140" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="newValue" line="140" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="146" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="146" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getAllowsNullValue" line="146" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="147" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="allowsNullValue" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="156" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setAppendsDotZero" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="156" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="newValue" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="157" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="appendsDotZero" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="newValue" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="163" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="163" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getAppendsDotZero" line="163" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="164" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="appendsDotZero" line="164" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="MARKER_ANNOTATION" line="0" instruction_class="MARKER_ANNOTATION" instruction="MARKER_ANNOTATION">
             <node name="Override" line="175" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="public" line="176" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="String" line="176" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="valueToString" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Object" line="176" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="value" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <node name="throws" line="176" instruction_class="throws" instruction="throws">
           <node name="ParseException" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="177" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="177" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="==" line="177" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="value" line="177" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="null" line="177" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
               <node name="allowsNullValue" line="177" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="return" line="178" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="&quot;&quot;" line="178" instruction_class="LITERAL" instruction="STRING_LITERAL">
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="181" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="instanceof" line="181" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
               <node name="value" line="181" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="Double" line="181" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="double" line="182" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="v" line="182" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                         <node name="Double" line="182" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                         </node>
                         <node name="value" line="182" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="doubleValue" line="182" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="*=" line="183" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="v" line="183" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="scaleFactor" line="183" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="String" line="184" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="str" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="Double" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="toString" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="v" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="if" line="185" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&amp;&amp;" line="185" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                     <node name="!" line="185" instruction_class="OPERATOR" instruction="LOGICAL_OPERATOR">
                       <node name="appendsDotZero" line="185" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="str" line="185" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="endsWith" line="185" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="&quot;.0&quot;" line="185" instruction_class="LITERAL" instruction="STRING_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="186" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="str" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                           <node name="str" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="substring" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                             <node name="0" line="186" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                             <node name="-" line="186" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                   <node name="str" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="length" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                               <node name="2" line="186" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
               <statement_node name="return" line="188" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="str" line="188" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="189" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="instanceof" line="189" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
                 <node name="value" line="189" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="Float" line="189" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="float" line="190" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="v" line="190" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                           <node name="Float" line="190" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                           </node>
                           <node name="value" line="190" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="floatValue" line="190" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="191" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="v" line="191" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                       <node name="float" line="191" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="*" line="191" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="v" line="191" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="scaleFactor" line="191" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="String" line="192" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="str" line="192" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="Float" line="192" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="toString" line="192" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="v" line="192" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="if" line="193" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="&amp;&amp;" line="193" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="appendsDotZero" line="193" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="str" line="193" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="endsWith" line="193" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="&quot;.0&quot;" line="193" instruction_class="LITERAL" instruction="STRING_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="194" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="str" line="194" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="str" line="194" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="substring" line="194" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                               <node name="0" line="194" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                               <node name="-" line="194" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                     <node name="str" line="194" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="length" line="194" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   </node>
                                 </node>
                                 <node name="2" line="194" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="return" line="196" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                   <node name="str" line="196" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="197" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="instanceof" line="197" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
                   <node name="value" line="197" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="Long" line="197" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                     <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                     </node>
                     <node name="long" line="198" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                     </node>
                     <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                       <node name="v" line="198" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                           <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                             <node name="Long" line="198" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                             </node>
                             <node name="value" line="198" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="longValue" line="198" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="199" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="v" line="199" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                         <node name="long" line="199" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="*" line="199" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="v" line="199" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="scaleFactor" line="199" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="return" line="200" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="Long" line="200" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="toString" line="200" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="v" line="200" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="if" line="201" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="instanceof" line="201" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
                     <node name="value" line="201" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="Integer" line="201" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                       <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                       </node>
                       <node name="int" line="202" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                         <node name="v" line="202" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                               <node name="Integer" line="202" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                               </node>
                               <node name="value" line="202" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="intValue" line="202" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="203" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="v" line="203" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                           <node name="int" line="203" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                           </node>
                           <node name="*" line="203" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="v" line="203" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="scaleFactor" line="203" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="return" line="204" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                           <node name="Integer" line="204" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="toString" line="204" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                             <node name="v" line="204" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="if" line="205" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="instanceof" line="205" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
                       <node name="value" line="205" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="Byte" line="205" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                         </node>
                         <node name="byte" line="206" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                           <node name="v" line="206" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                               <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                 <node name="Byte" line="206" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                 </node>
                                 <node name="value" line="206" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="byteValue" line="206" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="207" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="v" line="207" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                             <node name="byte" line="207" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="*" line="207" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="v" line="207" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="scaleFactor" line="207" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="return" line="208" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="Byte" line="208" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="toString" line="208" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                               <node name="v" line="208" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="if" line="209" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="instanceof" line="209" instruction_class="OPERATOR" instruction="TYPE_COMPARISON_OPERATOR">
                         <node name="value" line="209" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="Short" line="209" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                           <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                           </node>
                           <node name="short" line="210" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                           </node>
                           <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                             <node name="v" line="210" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                   <node name="Short" line="210" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                   </node>
                                   <node name="value" line="210" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                                 <node name="shortValue" line="210" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="211" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="v" line="211" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                               <node name="short" line="211" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                               </node>
                               <node name="*" line="211" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                 <node name="v" line="211" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="scaleFactor" line="211" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="return" line="212" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                               <node name="Short" line="212" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="toString" line="212" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                 <node name="v" line="212" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="throw" line="215" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
             <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
               <node name="ParseException" line="215" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="+" line="215" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="&quot;Value is of unsupported class &quot;" line="215" instruction_class="LITERAL" instruction="STRING_LITERAL">
                     </node>
                     <node name="value" line="215" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="0" line="215" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="MARKER_ANNOTATION" line="0" instruction_class="MARKER_ANNOTATION" instruction="MARKER_ANNOTATION">
             <node name="Override" line="226" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="public" line="227" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Object" line="227" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="stringToValue" line="227" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="227" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="text" line="227" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <node name="throws" line="227" instruction_class="throws" instruction="throws">
           <node name="ParseException" line="227" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="228" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="228" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="||" line="228" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="==" line="228" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="text" line="228" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="null" line="228" instruction_class="LITERAL" instruction="NULL_LITERAL">
                   </node>
                 </node>
                 <node name="==" line="228" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="text" line="228" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="length" line="228" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                   <node name="0" line="228" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="getAllowsNullValue" line="228" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="return" line="229" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="null" line="229" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Class" line="231" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="valueClass" line="231" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="getValueClass" line="231" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Object" line="232" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="value" line="232" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="233" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="233" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="valueClass" line="233" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="null" line="233" instruction_class="LITERAL" instruction="NULL_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="try" line="234" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_TRY">
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="if" line="235" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="235" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="valueClass" line="235" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                         <node name="Integer" line="235" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                         </node>
                         <node name="int" line="236" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                           <node name="v" line="236" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                               <node name="Integer" line="236" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="parseInt" line="236" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                 <node name="text" line="236" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="237" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="v" line="237" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                             <node name="int" line="237" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="/" line="237" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="v" line="237" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="scaleFactor" line="237" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="238" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="value" line="238" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                             <node name="Integer" line="238" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                 <node name="v" line="238" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="if" line="239" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="==" line="239" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                         <node name="valueClass" line="239" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                           <node name="Long" line="239" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                           <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                           </node>
                           <node name="long" line="240" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                           </node>
                           <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                             <node name="v" line="240" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="Long" line="240" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="parseLong" line="240" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                   <node name="text" line="240" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="241" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="v" line="241" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                               <node name="long" line="241" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                               </node>
                               <node name="/" line="241" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                 <node name="v" line="241" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="scaleFactor" line="241" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="242" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="value" line="242" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                               <node name="Long" line="242" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                   <node name="v" line="242" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="if" line="243" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="==" line="243" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="valueClass" line="243" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                             <node name="Float" line="243" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                             </node>
                             <node name="float" line="244" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                               <node name="v" line="244" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                   <node name="Float" line="244" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="parseFloat" line="244" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                     <node name="text" line="244" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="245" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="v" line="245" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                 <node name="float" line="245" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                 </node>
                                 <node name="/" line="245" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="v" line="245" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="scaleFactor" line="245" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="246" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="value" line="246" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                                 <node name="Float" line="246" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                     <node name="v" line="246" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="if" line="247" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                           <node name="==" line="247" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="valueClass" line="247" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                               <node name="Double" line="247" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                               <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                               </node>
                               <node name="double" line="248" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                               </node>
                               <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                                 <node name="v" line="248" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                     <node name="Double" line="248" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="parseDouble" line="248" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                       <node name="text" line="248" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="249" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="v" line="249" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                   <node name="double" line="249" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                   </node>
                                   <node name="/" line="249" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                     <node name="v" line="249" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="scaleFactor" line="249" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="250" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="value" line="250" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                                   <node name="Double" line="250" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                       <node name="v" line="250" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                           <statement_node name="if" line="251" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="==" line="251" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="valueClass" line="251" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                                 <node name="Byte" line="251" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                                 </node>
                                 <node name="byte" line="252" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                 </node>
                                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                                   <node name="v" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                       <node name="Byte" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="parseByte" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                         <node name="text" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="253" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="v" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                     <node name="byte" line="253" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                     </node>
                                     <node name="/" line="253" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                       <node name="v" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="scaleFactor" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="254" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="value" line="254" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                                     <node name="Byte" line="254" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                         <node name="v" line="254" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="if" line="255" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                               <node name="==" line="255" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                 <node name="valueClass" line="255" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CLASS_DESIGNATOR" line="0" instruction_class="CLASS_DESIGNATOR" instruction="CLASS_DESIGNATOR">
                                   <node name="Short" line="255" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                                   </node>
                                   <node name="short" line="256" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                   </node>
                                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                                     <node name="v" line="256" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                         <node name="Short" line="256" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="parseShort" line="256" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                           <node name="text" line="256" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="257" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="v" line="257" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                       <node name="short" line="257" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                       </node>
                                       <node name="/" line="257" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                         <node name="v" line="257" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="scaleFactor" line="257" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="258" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="value" line="258" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                                       <node name="Short" line="258" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                           <node name="v" line="258" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="throw" line="260" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                                   <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                                     <node name="ParseException" line="260" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                         <node name="+" line="260" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="&quot;Unsupported value class &quot;" line="260" instruction_class="LITERAL" instruction="STRING_LITERAL">
                                           </node>
                                           <node name="valueClass" line="260" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                         </node>
                                         <node name="0" line="260" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <node name="catch" line="262" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_CATCH">
                   <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
                     <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                     </node>
                     <node name="NumberFormatException" line="262" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                     </node>
                     <node name="e" line="262" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="throw" line="263" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                       <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                         <node name="ParseException" line="263" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="e" line="263" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="getMessage" line="263" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               </node>
                             </node>
                             <node name="0" line="263" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="266" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="ParseException" line="266" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="+" line="266" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="&quot;Unsupported value class &quot;" line="266" instruction_class="LITERAL" instruction="STRING_LITERAL">
                         </node>
                         <node name="valueClass" line="266" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="0" line="266" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="try" line="269" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_TRY">
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="if" line="270" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                   <node name="!" line="270" instruction_class="OPERATOR" instruction="LOGICAL_OPERATOR">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="isValidValue" line="270" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="value" line="270" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="true" line="270" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="throw" line="271" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                     <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                       <node name="ParseException" line="271" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="&quot;Value not within min/max range&quot;" line="271" instruction_class="LITERAL" instruction="STRING_LITERAL">
                           </node>
                           <node name="0" line="271" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
             <node name="catch" line="273" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_CATCH">
               <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="ClassCastException" line="273" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
                 <node name="cce" line="273" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="throw" line="274" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                   <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                     <node name="ParseException" line="274" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="+" line="274" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="&quot;Class cast exception comparing values: &quot;" line="274" instruction_class="LITERAL" instruction="STRING_LITERAL">
                           </node>
                           <node name="cce" line="274" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="0" line="274" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
             </node>
           </statement_node>
           <statement_node name="return" line="276" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="value" line="276" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="SINGLE_ELEMENT_ANNOTATION" line="0" instruction_class="SINGLE_ELEMENT_ANNOTATION" instruction="SINGLE_ELEMENT_ANNOTATION">
             <node name="SuppressWarnings" line="286" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <node name="&quot;unchecked&quot;" line="286" instruction_class="LITERAL" instruction="STRING_LITERAL">
             </node>
           </node>
         </node>
         <node name="boolean" line="287" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="isValidValue" line="287" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Object" line="287" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="value" line="287" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="287" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="wantsCCE" line="287" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Comparable" line="288" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="min" line="288" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="getMinimum" line="288" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="try" line="290" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_TRY">
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="if" line="291" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&amp;&amp;" line="291" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="!=" line="291" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="min" line="291" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="null" line="291" instruction_class="LITERAL" instruction="NULL_LITERAL">
                     </node>
                   </node>
                   <node name="&gt;" line="291" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="min" line="291" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="compareTo" line="291" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="value" line="291" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                     <node name="0" line="291" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="return" line="292" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="false" line="292" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
             <node name="catch" line="294" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_CATCH">
               <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="ClassCastException" line="294" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
                 <node name="cce" line="294" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="if" line="295" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="wantsCCE" line="295" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="throw" line="296" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                       <node name="cce" line="296" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="return" line="298" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                   <node name="false" line="298" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                 </statement_node>
               </statement_node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Comparable" line="301" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="max" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="getMaximum" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="try" line="302" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_TRY">
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="if" line="303" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&amp;&amp;" line="303" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="!=" line="303" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="max" line="303" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="null" line="303" instruction_class="LITERAL" instruction="NULL_LITERAL">
                     </node>
                   </node>
                   <node name="&lt;" line="303" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="max" line="303" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="compareTo" line="303" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="value" line="303" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                     <node name="0" line="303" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="return" line="304" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="false" line="304" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
             <node name="catch" line="306" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_CATCH">
               <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="ClassCastException" line="306" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
                 <node name="cce" line="306" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="if" line="307" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="wantsCCE" line="307" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="throw" line="308" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                       <node name="cce" line="308" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="return" line="310" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                   <node name="false" line="310" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                 </statement_node>
               </statement_node>
             </node>
           </statement_node>
           <statement_node name="return" line="312" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="true" line="312" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="320" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="320" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="AbstractFormatterFactory" line="320" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="createFormatterFactory" line="320" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="320" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="min" line="320" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="320" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="max" line="320" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="320" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="scaleFactor" line="320" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="321" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="createFormatterFactory" line="321" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="min" line="321" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="max" line="321" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="scaleFactor" line="321" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="false" line="321" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                   <node name="false" line="321" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="328" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="328" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="AbstractFormatterFactory" line="328" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="createFormatterFactory" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="328" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="min" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="328" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="max" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="double" line="328" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="scaleFactor" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="328" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="allowsNullValue" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="328" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="appendsDotZero" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="329" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
               <node name="DefaultFormatterFactory" line="329" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                     <node name="JavaNumberFormatter" line="329" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="min" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="max" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="scaleFactor" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="allowsNullValue" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="appendsDotZero" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
     </node>
   </class_statement_node>
 </node>
</srcfile>