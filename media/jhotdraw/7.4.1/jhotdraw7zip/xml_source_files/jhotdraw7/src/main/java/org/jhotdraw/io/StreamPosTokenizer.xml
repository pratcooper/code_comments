<?xml version="1.0" ?>
<srcfile name="StreamPosTokenizer.java" file_path="/Users/valerio/Research/Code/Source Code Comments Classification/comments_classification/media/jhotdraw/7.4.1/jhotdraw7zip/extracted/jhotdraw7/src/main/java/org/jhotdraw/io/StreamPosTokenizer.java" >
 <node name="COMPILATION_UNIT" line="0" instruction_class="COMPILATION_UNIT" instruction="COMPILATION_UNIT">
   <node name="PACKAGE_DECLARATION" line="0" instruction_class="KEYWORD" instruction="PACKAGE_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="org" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="jhotdraw" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="io" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="TYPE_IMPORT_ON_DEMAND_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="java" line="16" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
       <node name="io" line="16" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <node name="SINGLE_TYPE_IMPORT_DECLARATION" line="0" instruction_class="KEYWORD" instruction="IMPORT_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="java" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="util" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="Vector" line="17" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <class_statement_node name="CLASS_DECLARATION" line="0" instruction_class="CLASS_DECLARATION" instruction="CLASS_KEYWORD">
     <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
       <node name="public" line="31" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
       </node>
     </node>
     <node name="StreamPosTokenizer" line="31" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
     </node>
     <node name="CLASS_BODY" line="0" instruction_class="CLASS_BODY" instruction="CLASS_BODY">
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="33" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="Reader" line="33" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="reader" line="33" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="null" line="33" instruction_class="LITERAL" instruction="NULL_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="39" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="39" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="readpos" line="39" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="0" line="39" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="45" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="45" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="startpos" line="45" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="45" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="1" line="45" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="endpos" line="45" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="45" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="1" line="45" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="46" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="INSTANTIATION" line="0" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
           <node name="Vector" line="46" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="TYPE_ARGUMENTS" line="0" instruction_class="TYPE_ARGUMENTS" instruction="TYPE_ARGUMENTS">
             <node name="Integer" line="46" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
           </node>
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="unread" line="46" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
             <node name="INSTANTIATION" line="0" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
               <node name="Vector" line="46" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="TYPE_ARGUMENTS" line="0" instruction_class="TYPE_ARGUMENTS" instruction="TYPE_ARGUMENTS">
                 <node name="Integer" line="46" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                 </node>
               </node>
             </node>
             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="48" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="char" line="48" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
             <node name="buf" line="48" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
             <node name="char" line="48" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="20" line="48" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="57" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="57" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="peekc" line="57" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="NEED_CHAR" line="57" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="59" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="59" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="59" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="59" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="NEED_CHAR" line="59" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
             <node name="Integer" line="59" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <node name="MAX_VALUE" line="59" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="60" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="60" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="60" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="60" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="SKIP_LF" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="-" line="60" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
             <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
               <node name="Integer" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="MAX_VALUE" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <node name="1" line="60" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="62" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="62" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="pushedBack" line="62" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="63" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="63" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="forceLower" line="63" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="65" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="65" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="lineno" line="65" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="1" line="65" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="67" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="67" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="eolIsSignificantP" line="67" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="67" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="68" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="68" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="slashSlashCommentsP" line="68" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="68" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="69" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="69" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="slashStarCommentsP" line="69" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="69" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="72" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
           <node name="char" line="72" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
           </node>
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="slashSlash" line="72" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="NEW_INITIALIZED_ARRAY" line="0" instruction_class="NEW_INITIALIZED_ARRAY" instruction="NEW_INITIALIZED_ARRAY">
             <node name="char" line="72" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="[" line="72" instruction_class="[" instruction="[">
             </node>
             <node name="ARRAY_INITIALIZER" line="0" instruction_class="ARRAY_INITIALIZER" instruction="ARRAY_INITIALIZER">
               <node name="&#039;/&#039;" line="72" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
               <node name="&#039;/&#039;" line="72" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="73" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
           <node name="char" line="73" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
           </node>
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="slashStar" line="73" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="NEW_INITIALIZED_ARRAY" line="0" instruction_class="NEW_INITIALIZED_ARRAY" instruction="NEW_INITIALIZED_ARRAY">
             <node name="char" line="73" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="[" line="73" instruction_class="[" instruction="[">
             </node>
             <node name="ARRAY_INITIALIZER" line="0" instruction_class="ARRAY_INITIALIZER" instruction="ARRAY_INITIALIZER">
               <node name="&#039;/&#039;" line="73" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
               <node name="&#039;*&#039;" line="73" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="74" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
           <node name="char" line="74" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
           </node>
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="starSlash" line="74" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="NEW_INITIALIZED_ARRAY" line="0" instruction_class="NEW_INITIALIZED_ARRAY" instruction="NEW_INITIALIZED_ARRAY">
             <node name="char" line="74" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="[" line="74" instruction_class="[" instruction="[">
             </node>
             <node name="ARRAY_INITIALIZER" line="0" instruction_class="ARRAY_INITIALIZER" instruction="ARRAY_INITIALIZER">
               <node name="&#039;*&#039;" line="74" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
               <node name="&#039;/&#039;" line="74" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="76" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="76" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
             <node name="ctype" line="76" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
             <node name="byte" line="76" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="256" line="76" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="77" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="77" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="77" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="77" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="CT_WHITESPACE" line="77" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="1" line="77" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="78" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="78" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="78" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="78" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="CT_DIGIT" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="2" line="78" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="79" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="79" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="79" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="79" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="CT_ALPHA" line="79" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="4" line="79" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="80" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="80" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="80" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="80" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="CT_QUOTE" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="8" line="80" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="81" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="81" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="81" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="byte" line="81" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="CT_COMMENT" line="81" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="16" line="81" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="83" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="83" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="isParseHexNumbers" line="83" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="83" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="84" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="boolean" line="84" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="isParseExponents" line="84" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="false" line="84" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="111" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="111" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="ttype" line="111" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="TT_NOTHING" line="111" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="116" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="116" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="116" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="116" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="TT_EOF" line="116" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="116" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="1" line="116" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="121" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="121" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="121" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="121" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="TT_EOL" line="121" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="&#039;\n&#039;" line="121" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="126" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="126" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="126" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="126" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="TT_NUMBER" line="126" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="126" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="2" line="126" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="131" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="131" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="131" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="131" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="TT_WORD" line="131" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="131" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="3" line="131" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="137" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="static" line="137" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
           <node name="final" line="137" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="137" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="TT_NOTHING" line="137" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
           <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
             <node name="-" line="137" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="4" line="137" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="154" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="String" line="154" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="sval" line="154" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <statement_node name="FIELD_DECLARATION" line="0" instruction_class="FIELD_DECLARATION" instruction="FIELD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="164" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="double" line="164" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
           <node name="nval" line="164" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
       </statement_node>
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="167" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="StreamPosTokenizer" line="167" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="wordChars" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="&#039;a&#039;" line="168" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                   <node name="&#039;z&#039;" line="168" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="wordChars" line="169" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="&#039;A&#039;" line="169" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                   <node name="&#039;Z&#039;" line="169" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="wordChars" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="+" line="170" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="128" line="170" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                     <node name="32" line="170" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                   <node name="255" line="170" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="whitespaceChars" line="171" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="0" line="171" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                   <node name="&#039; &#039;" line="171" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="commentChar" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="&#039;/&#039;" line="172" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="quoteChar" line="173" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="&#039;&quot;&#039;" line="173" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="quoteChar" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="&#039;\&#039;&#039;" line="174" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="parseNumbers" line="175" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="183" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="StreamPosTokenizer" line="183" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Reader" line="183" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="r" line="183" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
           <node name="ALTERNATE_CONSTRUCTOR_INVOCATION" line="0" instruction_class="ALTERNATE_CONSTRUCTOR_INVOCATION" instruction="ALTERNATE_CONSTRUCTOR_INVOCATION">
             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
             </node>
           </node>
           <statement_node name="if" line="185" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="185" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="r" line="185" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="null" line="185" instruction_class="LITERAL" instruction="NULL_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="186" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="NullPointerException" line="186" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="188" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="reader" line="188" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="r" line="188" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="196" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setReader" line="196" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="Reader" line="196" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="r" line="196" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="197" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                 </node>
                 <node name="reader" line="197" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="r" line="197" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="198" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="readpos" line="198" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="198" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="unread" line="199" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="clear" line="199" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="200" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="peekc" line="200" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="NEED_CHAR" line="200" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="201" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="pushedBack" line="201" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="false" line="201" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="202" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="forceLower" line="202" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="false" line="202" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="203" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="lineno" line="203" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="203" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="204" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="startpos" line="204" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="=" line="204" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="endpos" line="204" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                   <node name="-" line="204" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="1" line="204" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="205" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ttype" line="205" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="TT_NOTHING" line="205" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="215" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="resetSyntax" line="215" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="for" line="216" instruction_class="LOOP_STATEMENT" instruction="FOR_STATEMENT">
             <node name="BASIC_FOR_CONTROL" line="0" instruction_class="BASIC_FOR_CONTROL" instruction="BASIC_FOR_CONTROL">
               <node name="FOR_INIT_DECLARATION" line="0" instruction_class="FOR_INIT_DECLARATION" instruction="FOR_INIT_DECLARATION">
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="int" line="216" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="i" line="216" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="ctype" line="216" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="length" line="216" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </node>
               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                   <node name="--" line="216" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="i" line="216" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
                 <node name="0" line="216" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="217" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="217" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="i" line="217" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="0" line="217" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="229" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="wordChars" line="229" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="229" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="low" line="229" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="229" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="hi" line="229" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="230" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="230" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="230" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="230" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="231" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="low" line="231" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="231" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="232" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hi" line="232" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="ctype" line="232" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="length" line="232" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="233" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="hi" line="233" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="-" line="233" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="ctype" line="233" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="233" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="1" line="233" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="while" line="234" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
             <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="234" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="hi" line="234" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="|=" line="235" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="235" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                     <node name="low" line="235" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
                 <node name="CT_ALPHA" line="235" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="247" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="whitespaceChars" line="247" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="247" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="low" line="247" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="247" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="hi" line="247" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="248" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="248" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="248" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="248" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="249" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="low" line="249" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="249" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="250" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hi" line="250" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="ctype" line="250" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="length" line="250" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="251" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="hi" line="251" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="-" line="251" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="ctype" line="251" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="251" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="1" line="251" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="while" line="252" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
             <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="hi" line="252" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="253" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                     <node name="low" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
                 <node name="CT_WHITESPACE" line="253" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="267" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="ordinaryChars" line="267" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="267" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="low" line="267" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="267" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="hi" line="267" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="268" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="268" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="268" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="268" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="269" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="low" line="269" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="269" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="270" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hi" line="270" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="ctype" line="270" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="length" line="270" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="271" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="hi" line="271" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="-" line="271" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="ctype" line="271" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="271" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="1" line="271" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="while" line="272" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
             <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="low" line="272" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="hi" line="272" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="273" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="273" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                     <node name="low" line="273" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
                 <node name="0" line="273" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="288" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="ordinaryChar" line="288" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="288" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="ch" line="288" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="289" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="289" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="289" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="289" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="&lt;" line="289" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="289" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="ctype" line="289" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="289" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="290" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="290" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ch" line="290" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="0" line="290" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="300" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="commentChar" line="300" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="300" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="ch" line="300" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="301" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="301" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="301" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="&lt;" line="301" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="ctype" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="301" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="302" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="302" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ch" line="302" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="CT_COMMENT" line="302" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="327" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="quoteChar" line="327" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="327" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="ch" line="327" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="328" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&amp;&amp;" line="328" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="328" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="&lt;" line="328" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="ch" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="ctype" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="328" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="329" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ch" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="CT_QUOTE" line="329" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="352" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="parseNumbers" line="352" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="for" line="353" instruction_class="LOOP_STATEMENT" instruction="FOR_STATEMENT">
             <node name="BASIC_FOR_CONTROL" line="0" instruction_class="BASIC_FOR_CONTROL" instruction="BASIC_FOR_CONTROL">
               <node name="FOR_INIT_DECLARATION" line="0" instruction_class="FOR_INIT_DECLARATION" instruction="FOR_INIT_DECLARATION">
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="int" line="353" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="i" line="353" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="&#039;0&#039;" line="353" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                     </node>
                   </node>
                 </statement_node>
               </node>
               <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="i" line="353" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="&#039;9&#039;" line="353" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                 </node>
               </node>
               <node name="FOR_UPDATE" line="0" instruction_class="FOR_UPDATE" instruction="FOR_UPDATE">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                     <node name="i" line="353" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="|=" line="354" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ctype" line="354" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="i" line="354" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="CT_DIGIT" line="354" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="|=" line="355" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="ctype" line="355" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="&#039;.&#039;" line="355" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                 </node>
               </node>
               <node name="CT_DIGIT" line="355" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="|=" line="356" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="ctype" line="356" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="&#039;-&#039;" line="356" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                 </node>
               </node>
               <node name="CT_DIGIT" line="356" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="360" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="parsePlusAsNumber" line="360" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="|=" line="361" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="ctype" line="361" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="&#039;+&#039;" line="361" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                 </node>
               </node>
               <node name="CT_DIGIT" line="361" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="367" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="parseHexNumbers" line="367" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="parseNumbers" line="368" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="369" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="isParseHexNumbers" line="369" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="true" line="369" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="376" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="parseExponents" line="376" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="parseNumbers" line="377" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="378" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="isParseExponents" line="378" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="true" line="378" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="404" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="eolIsSignificant" line="404" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="404" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="flag" line="404" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="405" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="eolIsSignificantP" line="405" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="flag" line="405" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="420" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="slashStarComments" line="420" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="420" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="flag" line="420" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="421" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="slashStarCommentsP" line="421" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="flag" line="421" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="437" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="slashSlashComments" line="437" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="437" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="flag" line="437" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="438" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="slashSlashCommentsP" line="438" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="flag" line="438" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="458" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="lowerCaseMode" line="458" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="boolean" line="458" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="fl" line="458" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="459" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="forceLower" line="459" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="fl" line="459" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="463" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="463" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="read" line="463" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <node name="throws" line="463" instruction_class="throws" instruction="throws">
           <node name="IOException" line="463" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="465" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="data" line="465" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="466" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="466" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="unread" line="466" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="size" line="466" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
               <node name="0" line="466" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="467" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="data" line="467" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                         <node name="Integer" line="467" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="unread" line="467" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="lastElement" line="467" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                       <node name="intValue" line="467" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="unread" line="468" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="removeElementAt" line="468" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="-" line="468" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="unread" line="468" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="size" line="468" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                         <node name="1" line="468" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="470" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="data" line="470" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="reader" line="470" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="read" line="470" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="472" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="472" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="data" line="472" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                 <node name="-" line="472" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="1" line="472" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                   <node name="readpos" line="472" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="return" line="473" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="data" line="473" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="private" line="476" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="unread" line="476" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="476" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="c" line="476" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="unread" line="477" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="addElement" line="477" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                     <node name="Integer" line="477" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="c" line="477" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="POST_DECREMENT_EXPRESSION" line="0" instruction_class="POST_DECREMENT_EXPRESSION" instruction="POST_DECREMENT_EXPRESSION">
               <node name="readpos" line="478" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="499" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="499" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="nextToken" line="499" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <node name="throws" line="499" instruction_class="throws" instruction="throws">
           <node name="IOException" line="499" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="500" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="pushedBack" line="500" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="501" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="pushedBack" line="501" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="false" line="501" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="return" line="502" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="ttype" line="502" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="byte" line="504" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
                 <node name="ct" line="504" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="ctype" line="504" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="505" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="sval" line="505" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="null" line="505" instruction_class="LITERAL" instruction="NULL_LITERAL">
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="507" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="c" line="507" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="peekc" line="507" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="508" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="508" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="c" line="508" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="508" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="509" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="c" line="509" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="NEED_CHAR" line="509" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="510" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="510" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="c" line="510" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="SKIP_LF" line="510" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="511" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="c" line="511" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="read" line="511" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="if" line="512" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="512" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="c" line="512" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="512" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="514" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="startpos" line="514" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="=" line="514" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="endpos" line="514" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="-" line="514" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="readpos" line="514" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="1" line="514" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="return" line="515" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="=" line="515" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ttype" line="515" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="TT_EOF" line="515" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="517" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="==" line="517" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="c" line="517" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="&#039;\n&#039;" line="517" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="518" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="c" line="518" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="NEED_CHAR" line="518" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="520" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="520" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="c" line="520" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="NEED_CHAR" line="520" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="521" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="c" line="521" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="read" line="521" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="if" line="522" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="522" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="c" line="522" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="522" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="524" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="startpos" line="524" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="=" line="524" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="endpos" line="524" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="-" line="524" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="readpos" line="524" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="1" line="524" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="return" line="525" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="=" line="525" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ttype" line="525" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="TT_EOF" line="525" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="528" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ttype" line="528" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="c" line="528" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="533" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="peekc" line="533" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="NEED_CHAR" line="533" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="535" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="ctype" line="535" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="?" line="535" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="&lt;" line="535" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="c" line="535" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="256" line="535" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                   <node name="ct" line="535" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="c" line="535" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="CT_ALPHA" line="535" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="while" line="536" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
             <node name="!=" line="536" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="&amp;" line="536" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                 <node name="ctype" line="536" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CT_WHITESPACE" line="536" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="0" line="536" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="if" line="537" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="==" line="537" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="c" line="537" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="&#039;\r&#039;" line="537" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                       <node name="lineno" line="538" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="if" line="539" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="eolIsSignificantP" line="539" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="540" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="peekc" line="540" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="SKIP_LF" line="540" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="542" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="startpos" line="542" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="=" line="542" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="endpos" line="542" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="-" line="542" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="readpos" line="542" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="1" line="542" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="return" line="543" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                         <node name="=" line="543" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="ttype" line="543" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="TT_EOL" line="543" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="545" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="c" line="545" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="read" line="545" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="if" line="546" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="546" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="546" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;\n&#039;" line="546" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="547" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="547" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="547" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="if" line="549" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="549" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="549" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;\n&#039;" line="549" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                           <node name="lineno" line="550" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="if" line="551" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="eolIsSignificantP" line="551" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="553" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="startpos" line="553" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="=" line="553" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="endpos" line="553" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="-" line="553" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                   <node name="readpos" line="553" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="1" line="553" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="return" line="554" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                             <node name="=" line="554" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="ttype" line="554" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="TT_EOL" line="554" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="557" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="c" line="557" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="read" line="557" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="559" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="559" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="c" line="559" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="559" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="561" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="startpos" line="561" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="=" line="561" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="endpos" line="561" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="readpos" line="561" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="return" line="562" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="=" line="562" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ttype" line="562" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="TT_EOF" line="562" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="564" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ctype" line="564" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="?" line="564" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="&lt;" line="564" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                       <node name="c" line="564" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="256" line="564" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                     <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                       <node name="ct" line="564" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="c" line="564" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="CT_ALPHA" line="564" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="568" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="startpos" line="568" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="568" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="readpos" line="568" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="1" line="568" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name=":" line="571" instruction_class=":" instruction=":">
             <node name="hex" line="571" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <statement_node name="if" line="571" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&amp;&amp;" line="572" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="&amp;&amp;" line="571" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="!=" line="571" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="&amp;" line="571" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                       <node name="ctype" line="571" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CT_DIGIT" line="571" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="0" line="571" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                   <node name="==" line="572" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="c" line="572" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="&#039;0&#039;" line="572" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <node name="isParseHexNumbers" line="572" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="573" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="c" line="573" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="read" line="573" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="if" line="574" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="==" line="574" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="c" line="574" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="&#039;x&#039;" line="574" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                       <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                       </node>
                       <node name="int" line="575" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                         <node name="digits" line="575" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="575" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                       <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                       </node>
                       <node name="long" line="576" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                         <node name="hval" line="576" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="576" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="while" line="577" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                       <node name="&lt;" line="577" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                         <node name="digits" line="577" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="16" line="577" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="578" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="c" line="578" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                               <node name="read" line="578" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="if" line="579" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                           <node name="&amp;&amp;" line="579" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                             <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                               <node name="c" line="579" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;0&#039;" line="579" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                             <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                               <node name="c" line="579" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;9&#039;" line="579" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="580" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="hval" line="580" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="|" line="580" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                                   <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                                     <node name="hval" line="580" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="4" line="580" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                   <node name="-" line="580" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="c" line="580" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="&#039;0&#039;" line="580" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                           <statement_node name="if" line="581" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="&amp;&amp;" line="581" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="c" line="581" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;A&#039;" line="581" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="c" line="581" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;F&#039;" line="581" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="582" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="hval" line="582" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="|" line="582" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                                     <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                                       <node name="hval" line="582" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="4" line="582" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                       </node>
                                     </node>
                                     <node name="+" line="582" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                       <node name="-" line="582" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                         <node name="c" line="582" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="&#039;A&#039;" line="582" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                         </node>
                                       </node>
                                       <node name="10" line="582" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="if" line="583" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                               <node name="&amp;&amp;" line="583" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                 <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                   <node name="c" line="583" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;a&#039;" line="583" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                                 <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                   <node name="c" line="583" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;f&#039;" line="583" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="584" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="hval" line="584" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="|" line="584" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                                       <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                                         <node name="hval" line="584" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="4" line="584" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                         </node>
                                       </node>
                                       <node name="+" line="584" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                         <node name="-" line="584" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="c" line="584" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="&#039;a&#039;" line="584" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                           </node>
                                         </node>
                                         <node name="10" line="584" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                     <node name="unread" line="586" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                         <node name="c" line="586" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="if" line="587" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                   <node name="==" line="587" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                     <node name="digits" line="587" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="0" line="587" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="588" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="sval" line="588" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="&quot;0x&quot;" line="588" instruction_class="LITERAL" instruction="STRING_LITERAL">
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="589" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="endpos" line="589" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="-" line="589" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="readpos" line="589" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="1" line="589" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="return" line="590" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                       <node name="=" line="590" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="ttype" line="590" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="TT_WORD" line="590" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="592" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="nval" line="592" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                                           <node name="double" line="592" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                                           </node>
                                           <node name="hval" line="592" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="593" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="endpos" line="593" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="-" line="593" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="readpos" line="593" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="1" line="593" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="return" line="594" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                       <node name="=" line="594" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="ttype" line="594" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="TT_NUMBER" line="594" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                             <node name="digits" line="597" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="599" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="nval" line="599" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                           <node name="double" line="599" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                           </node>
                           <node name="hval" line="599" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="600" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="endpos" line="600" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="-" line="600" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="readpos" line="600" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="1" line="600" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="return" line="601" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                       <node name="=" line="601" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="ttype" line="601" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="TT_NUMBER" line="601" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="unread" line="603" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                             <node name="c" line="603" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="604" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="604" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="&#039;0&#039;" line="604" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name=":" line="608" instruction_class=":" instruction=":">
             <node name="digit" line="608" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <statement_node name="if" line="608" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="!=" line="608" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="&amp;" line="608" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                   <node name="ctype" line="608" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CT_DIGIT" line="608" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="0" line="608" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="int" line="609" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="digits" line="609" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="609" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="boolean" line="610" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="neg" line="610" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="false" line="610" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="if" line="611" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="==" line="611" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="c" line="611" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="&#039;-&#039;" line="611" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="612" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="612" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="612" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="if" line="613" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="&amp;&amp;" line="613" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                         <node name="!=" line="613" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="c" line="613" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="&#039;.&#039;" line="613" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                           </node>
                         </node>
                         <node name="||" line="613" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="&lt;" line="613" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="613" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;0&#039;" line="613" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                           <node name="&gt;" line="613" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="613" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;9&#039;" line="613" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="614" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="peekc" line="614" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="c" line="614" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="if" line="616" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                           <node name="!=" line="616" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="&amp;" line="616" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                               <node name="&#039;-&#039;" line="616" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                               <node name="CT_ALPHA" line="616" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="0" line="616" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="unread" line="617" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                     <node name="c" line="617" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="618" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="c" line="618" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;-&#039;" line="618" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="break" line="619" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               <node name="digit" line="619" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </statement_node>
                           </statement_node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="621" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="endpos" line="621" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="-" line="621" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                   <node name="readpos" line="621" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="1" line="621" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="return" line="622" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                               <node name="=" line="622" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="ttype" line="622" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;-&#039;" line="622" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="625" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="neg" line="625" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="true" line="625" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="if" line="626" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="626" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="626" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;+&#039;" line="626" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="627" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="c" line="627" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="read" line="627" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="if" line="628" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="&amp;&amp;" line="628" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="!=" line="628" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="c" line="628" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;.&#039;" line="628" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                           <node name="||" line="628" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                             <node name="&lt;" line="628" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                               <node name="c" line="628" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;0&#039;" line="628" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                             <node name="&gt;" line="628" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                               <node name="c" line="628" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;9&#039;" line="628" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="629" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="peekc" line="629" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="c" line="629" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="if" line="631" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="!=" line="631" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="&amp;" line="631" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                                 <node name="&#039;+&#039;" line="631" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                                 <node name="CT_ALPHA" line="631" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="0" line="631" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="unread" line="632" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                       <node name="c" line="632" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="633" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="633" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;+&#039;" line="633" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="634" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                                 <node name="digit" line="634" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="636" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="endpos" line="636" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="-" line="636" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="readpos" line="636" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="1" line="636" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="return" line="637" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                 <node name="=" line="637" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="ttype" line="637" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;-&#039;" line="637" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="640" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="neg" line="640" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="false" line="640" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="double" line="643" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="v" line="643" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="643" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="int" line="644" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="decexp" line="644" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="644" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="int" line="645" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="seendot" line="645" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="645" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="while" line="646" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                   <node name="true" line="646" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="if" line="647" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="&amp;&amp;" line="647" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                         <node name="==" line="647" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="c" line="647" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="&#039;.&#039;" line="647" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                           </node>
                         </node>
                         <node name="==" line="647" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="seendot" line="647" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="0" line="647" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="648" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="seendot" line="648" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="1" line="648" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="if" line="649" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="&amp;&amp;" line="649" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="&#039;0&#039;" line="649" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                             <node name="c" line="649" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="649" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;9&#039;" line="649" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                               <node name="digits" line="650" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="651" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="v" line="651" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="+" line="651" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="*" line="651" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="v" line="651" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="10" line="651" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                                 <node name="-" line="651" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                   <node name="c" line="651" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;0&#039;" line="651" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="+=" line="652" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="decexp" line="652" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="seendot" line="652" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="break" line="654" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="655" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="655" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="655" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="657" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="peekc" line="657" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="c" line="657" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="if" line="658" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="!=" line="658" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="decexp" line="658" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="658" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                       <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                       </node>
                       <node name="double" line="659" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                         <node name="denom" line="659" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="10" line="659" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="POST_DECREMENT_EXPRESSION" line="0" instruction_class="POST_DECREMENT_EXPRESSION" instruction="POST_DECREMENT_EXPRESSION">
                         <node name="decexp" line="660" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="while" line="661" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                       <node name="&gt;" line="661" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                         <node name="decexp" line="661" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="661" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="*=" line="662" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="denom" line="662" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="10" line="662" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="POST_DECREMENT_EXPRESSION" line="0" instruction_class="POST_DECREMENT_EXPRESSION" instruction="POST_DECREMENT_EXPRESSION">
                             <node name="decexp" line="663" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="666" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="v" line="666" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="/" line="666" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="v" line="666" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="denom" line="666" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="668" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="nval" line="668" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="?" line="668" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                       <node name="neg" line="668" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                         <node name="-" line="668" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="v" line="668" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                       <node name="v" line="668" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="670" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="endpos" line="670" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="?" line="670" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                       <node name="==" line="670" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                         <node name="c" line="670" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                           <node name="-" line="670" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="1" line="670" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                         </node>
                       </node>
                       <node name="-" line="670" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="readpos" line="670" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="1" line="670" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="-" line="670" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="readpos" line="670" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="2" line="670" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="if" line="671" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="==" line="671" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="digits" line="671" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="671" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="if" line="672" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="!=" line="672" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                         <node name="&amp;" line="672" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                           <node name="&#039;.&#039;" line="672" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                           </node>
                           <node name="CT_ALPHA" line="672" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="0" line="672" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="unread" line="673" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                 <node name="c" line="673" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="if" line="674" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                           <node name="neg" line="674" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="unread" line="675" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                     <node name="&#039;.&#039;" line="675" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="676" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="c" line="676" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;-&#039;" line="676" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="read" line="678" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="679" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="c" line="679" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;.&#039;" line="679" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="break" line="681" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                           <node name="digit" line="681" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="return" line="683" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                           <node name="=" line="683" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="ttype" line="683" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;.&#039;" line="683" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="if" line="686" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="isParseExponents" line="686" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="if" line="687" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                           <node name="||" line="687" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                             <node name="==" line="687" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="c" line="687" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;E&#039;" line="687" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                             <node name="==" line="687" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="c" line="687" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;e&#039;" line="687" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="688" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="c" line="688" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="read" line="688" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="690" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="digits" line="690" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="690" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="691" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="neg" line="691" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="false" line="691" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="if" line="692" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                               <node name="==" line="692" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                 <node name="c" line="692" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;-&#039;" line="692" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="693" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="c" line="693" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                       <node name="read" line="693" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="if" line="694" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                   <node name="||" line="694" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                     <node name="&lt;" line="694" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="c" line="694" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;0&#039;" line="694" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                     <node name="&gt;" line="694" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="c" line="694" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;9&#039;" line="694" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                         <node name="unread" line="695" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                             <node name="c" line="695" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                             </node>
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                         <node name="unread" line="696" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                           <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                             <node name="&#039;E&#039;" line="696" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                             </node>
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="return" line="697" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                       <node name="=" line="697" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="ttype" line="697" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="TT_NUMBER" line="697" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="699" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="neg" line="699" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="true" line="699" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="701" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="v" line="701" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="701" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="702" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="decexp" line="702" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="702" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="while" line="703" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                               <node name="true" line="703" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="if" line="704" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                   <node name="&amp;&amp;" line="704" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                     <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="&#039;0&#039;" line="704" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                       <node name="c" line="704" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                     <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="c" line="704" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;9&#039;" line="704" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                                         <node name="digits" line="705" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="706" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="v" line="706" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="+" line="706" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="*" line="706" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                             <node name="v" line="706" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                             </node>
                                             <node name="10" line="706" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                             </node>
                                           </node>
                                           <node name="-" line="706" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                             <node name="c" line="706" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                             </node>
                                             <node name="&#039;0&#039;" line="706" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                             </node>
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="break" line="708" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                                     </statement_node>
                                   </statement_node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="710" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="c" line="710" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                       <node name="read" line="710" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="712" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="peekc" line="712" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="c" line="712" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="*=" line="713" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="nval" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                     <node name="Math" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="pow" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                                       <node name="10" line="713" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                       </node>
                                       <node name="?" line="713" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                         <node name="neg" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                                           <node name="-" line="713" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                             <node name="v" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                             </node>
                                           </node>
                                         </node>
                                         <node name="v" line="713" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="return" line="716" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                       <node name="=" line="716" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="ttype" line="716" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="TT_NUMBER" line="716" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="720" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="720" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="&amp;" line="720" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                 <node name="ctype" line="720" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CT_ALPHA" line="720" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="0" line="720" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="int" line="721" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="i" line="721" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="721" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="do" line="722" instruction_class="LOOP_STATEMENT" instruction="DOWHILE_STATEMENT">
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="if" line="723" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                       <node name="i" line="723" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="buf" line="723" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="length" line="723" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                         </node>
                         <node name="char" line="724" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                           <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
                             <node name="nb" line="724" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
                             <node name="char" line="724" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="*" line="724" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="buf" line="724" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="length" line="724" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="2" line="724" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="System" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="arraycopy" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                               <node name="buf" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="0" line="725" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                               <node name="nb" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="0" line="725" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="buf" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="length" line="725" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="726" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="buf" line="726" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="nb" line="726" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="728" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                         <node name="buf" line="728" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                           <node name="i" line="728" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                       <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                         <node name="char" line="728" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="c" line="728" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="729" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="c" line="729" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="read" line="729" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="730" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ctype" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="?" line="730" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                         <node name="&lt;" line="730" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                           <node name="c" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="0" line="730" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                         <node name="CT_WHITESPACE" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="?" line="730" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="&lt;" line="730" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="256" line="730" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                           <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                             <node name="ct" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="c" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="CT_ALPHA" line="730" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <node name="!=" line="731" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="&amp;" line="731" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                     <node name="ctype" line="731" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="|" line="731" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                       <node name="CT_ALPHA" line="731" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="CT_DIGIT" line="731" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                   <node name="0" line="731" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="732" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="peekc" line="732" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="c" line="732" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="733" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="sval" line="733" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="String" line="733" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="copyValueOf" line="733" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="buf" line="733" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="733" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                         <node name="i" line="733" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="if" line="734" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="forceLower" line="734" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="735" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="sval" line="735" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="sval" line="735" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="toLowerCase" line="735" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="737" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="endpos" line="737" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="?" line="737" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="==" line="737" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="737" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="PREFIX_EXPRESSION" line="0" instruction_class="PREFIX_EXPRESSION" instruction="PREFIX_EXPRESSION">
                         <node name="-" line="737" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="1" line="737" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                     <node name="-" line="737" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                       <node name="readpos" line="737" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="1" line="737" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                     <node name="-" line="737" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                       <node name="readpos" line="737" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="2" line="737" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="return" line="738" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="=" line="738" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ttype" line="738" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="TT_WORD" line="738" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="741" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="741" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="&amp;" line="741" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                 <node name="ctype" line="741" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CT_QUOTE" line="741" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="0" line="741" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="742" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ttype" line="742" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="c" line="742" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="int" line="743" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="i" line="743" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="743" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="int" line="748" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="d" line="748" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="read" line="748" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="while" line="749" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                 <node name="&amp;&amp;" line="749" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="&amp;&amp;" line="749" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="&amp;&amp;" line="749" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                       <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                         <node name="d" line="749" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="749" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="!=" line="749" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                         <node name="d" line="749" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ttype" line="749" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                     <node name="!=" line="749" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="d" line="749" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;\n&#039;" line="749" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                   </node>
                   <node name="!=" line="749" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="d" line="749" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="&#039;\r&#039;" line="749" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="if" line="750" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="750" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="d" line="750" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;\\&#039;" line="750" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="751" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="c" line="751" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="read" line="751" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                         </node>
                         <node name="int" line="752" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                           <node name="first" line="752" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="c" line="752" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="if" line="753" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="&amp;&amp;" line="753" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="753" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;0&#039;" line="753" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                           <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                             <node name="c" line="753" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;7&#039;" line="753" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="754" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="c" line="754" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="-" line="754" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="c" line="754" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;0&#039;" line="754" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                             </node>
                             <node name="int" line="755" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                               <node name="c2" line="755" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="read" line="755" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="if" line="756" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="&amp;&amp;" line="756" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                               <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="&#039;0&#039;" line="756" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                                 <node name="c2" line="756" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="c2" line="756" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;7&#039;" line="756" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="757" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="757" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="+" line="757" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                                       <node name="c" line="757" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="3" line="757" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                       </node>
                                     </node>
                                     <node name="-" line="757" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                       <node name="c2" line="757" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;0&#039;" line="757" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="758" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c2" line="758" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                     <node name="read" line="758" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="if" line="759" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                 <node name="&amp;&amp;" line="759" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                   <node name="&amp;&amp;" line="759" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                     <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="&#039;0&#039;" line="759" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                       <node name="c2" line="759" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                     <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                       <node name="c2" line="759" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;7&#039;" line="759" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                   <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                     <node name="first" line="759" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="&#039;3&#039;" line="759" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                     <node name="=" line="760" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                       <node name="c" line="760" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="+" line="760" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                         <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                                           <node name="c" line="760" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="3" line="760" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                           </node>
                                         </node>
                                         <node name="-" line="760" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                           <node name="c2" line="760" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="&#039;0&#039;" line="760" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                           </node>
                                         </node>
                                       </node>
                                     </node>
                                   </statement_node>
                                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                     <node name="=" line="761" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                       <node name="d" line="761" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                         <node name="read" line="761" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                         </node>
                                       </node>
                                     </node>
                                   </statement_node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="763" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="d" line="763" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="c2" line="763" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="765" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="d" line="765" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="c2" line="765" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="switch" line="767" instruction_class="CONDITIONAL_STATEMENT" instruction="SWITCH_STATEMENT">
                             <node name="c" line="767" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="768" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;a&#039;" line="768" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="769" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="769" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="0x7" line="769" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="770" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="771" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;b&#039;" line="771" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="772" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="772" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;\b&#039;" line="772" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="773" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="774" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;f&#039;" line="774" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="775" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="775" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="0xC" line="775" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="776" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="777" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;n&#039;" line="777" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="778" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="778" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;\n&#039;" line="778" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="779" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="780" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;r&#039;" line="780" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="781" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="781" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;\r&#039;" line="781" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="782" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="783" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;t&#039;" line="783" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="784" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="784" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;\t&#039;" line="784" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="785" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
                               <node name="case" line="786" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                                 <node name="&#039;v&#039;" line="786" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="787" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="787" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="0xB" line="787" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="break" line="788" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                               </statement_node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="790" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="d" line="790" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="read" line="790" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="793" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="c" line="793" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="d" line="793" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="794" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="d" line="794" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="read" line="794" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="if" line="796" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                       <node name="i" line="796" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="buf" line="796" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="length" line="796" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                         </node>
                         <node name="char" line="797" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                           <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
                             <node name="nb" line="797" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
                             <node name="char" line="797" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                             </node>
                             <node name="*" line="797" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="buf" line="797" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="length" line="797" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="2" line="797" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="System" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="arraycopy" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                               <node name="buf" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="0" line="798" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                               <node name="nb" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="0" line="798" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                                 <node name="buf" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="length" line="798" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="799" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="buf" line="799" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="nb" line="799" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="801" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                         <node name="buf" line="801" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                           <node name="i" line="801" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                       <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                         <node name="char" line="801" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                         </node>
                         <node name="c" line="801" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="808" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="peekc" line="808" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="?" line="808" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="==" line="808" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="d" line="808" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="ttype" line="808" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="NEED_CHAR" line="808" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="d" line="808" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="810" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="sval" line="810" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="String" line="810" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="copyValueOf" line="810" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="buf" line="810" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="810" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                         <node name="i" line="810" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="812" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="endpos" line="812" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="-" line="812" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="readpos" line="812" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="2" line="812" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="return" line="813" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="ttype" line="813" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="860" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="||" line="861" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="&amp;&amp;" line="860" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="slashSlashCommentsP" line="860" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="==" line="860" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="c" line="860" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                     <node name="slashSlash" line="860" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="860" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
               <node name="&amp;&amp;" line="861" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="slashStarCommentsP" line="861" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="==" line="861" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="c" line="861" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                     <node name="slashStar" line="861" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="861" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="if" line="862" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&amp;&amp;" line="862" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="==" line="862" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="c" line="862" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                       <node name="slashStar" line="862" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="0" line="862" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                   </node>
                   <node name="==" line="862" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="slashStar" line="862" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="length" line="862" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="1" line="862" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="while" line="865" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                     <node name="!=" line="865" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="=" line="865" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="865" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="865" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                       <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                         <node name="starSlash" line="865" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="865" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="if" line="866" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="==" line="866" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="c" line="866" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="&#039;\r&#039;" line="866" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                               <node name="lineno" line="867" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="868" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="c" line="868" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="read" line="868" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="if" line="869" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="==" line="869" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="c" line="869" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;\n&#039;" line="869" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="870" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="870" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                     <node name="read" line="870" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="if" line="873" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="==" line="873" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="c" line="873" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="&#039;\n&#039;" line="873" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                                   <node name="lineno" line="874" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="875" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="c" line="875" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                     <node name="read" line="875" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="if" line="878" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="&lt;" line="878" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                           <node name="c" line="878" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="0" line="878" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="879" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="endpos" line="879" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="readpos" line="879" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="return" line="880" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                             <node name="=" line="880" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="ttype" line="880" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="TT_EOF" line="880" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="return" line="883" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="nextToken" line="883" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="if" line="884" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="&amp;&amp;" line="884" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="==" line="884" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="884" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                         <node name="slashSlash" line="884" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="0" line="884" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                     <node name="==" line="884" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="slashSlash" line="884" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="length" line="884" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="1" line="884" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="while" line="887" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                       <node name="&amp;&amp;" line="887" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                         <node name="&amp;&amp;" line="887" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="!=" line="887" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="=" line="887" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="c" line="887" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                 <node name="read" line="887" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                 </node>
                               </node>
                             </node>
                             <node name="&#039;\n&#039;" line="887" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                           <node name="!=" line="887" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="c" line="887" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="&#039;\r&#039;" line="887" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                             </node>
                           </node>
                         </node>
                         <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                           <node name="c" line="887" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="0" line="887" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                           </node>
                         </node>
                       </node>
                       <statement_node name="EMPTY_STATEMENT" line="0" instruction_class="EMPTY_STATEMENT" instruction="EMPTY_STATEMENT">
                       </statement_node>
                     </statement_node>
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="888" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="peekc" line="888" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="c" line="888" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="return" line="889" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                       <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                         <node name="nextToken" line="889" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="893" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="893" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="893" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                     <statement_node name="if" line="894" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="&amp;&amp;" line="894" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                         <node name="==" line="894" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                           <node name="c" line="894" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                             <node name="slashStar" line="894" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="1" line="894" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                         </node>
                         <node name="slashStarCommentsP" line="894" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                           <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                           </node>
                           <node name="int" line="895" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                           </node>
                           <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                             <node name="prevc" line="895" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="0" line="895" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                         </statement_node>
                         <statement_node name="while" line="896" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                           <node name="||" line="896" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                             <node name="!=" line="896" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="=" line="896" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="c" line="896" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="read" line="896" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   </node>
                                 </node>
                               </node>
                               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                                 <node name="starSlash" line="896" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="1" line="896" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </node>
                             <node name="!=" line="896" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="prevc" line="896" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                                 <node name="starSlash" line="896" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="896" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </node>
                           </node>
                           <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                             <statement_node name="if" line="897" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                               <node name="==" line="897" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                 <node name="c" line="897" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="&#039;\r&#039;" line="897" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                                     <node name="lineno" line="898" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="899" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="c" line="899" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                       <node name="read" line="899" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       </node>
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="if" line="900" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                   <node name="==" line="900" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                     <node name="c" line="900" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="&#039;\n&#039;" line="900" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                     </node>
                                   </node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="901" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="c" line="901" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                           <node name="read" line="901" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                 </statement_node>
                               </statement_node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="if" line="904" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                                   <node name="==" line="904" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                     <node name="c" line="904" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="&#039;\n&#039;" line="904" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                     </node>
                                   </node>
                                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                                         <node name="lineno" line="905" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                       </node>
                                     </statement_node>
                                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                       <node name="=" line="906" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="c" line="906" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                           <node name="read" line="906" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                           </node>
                                         </node>
                                       </node>
                                     </statement_node>
                                   </statement_node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="if" line="909" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                               <node name="&lt;" line="909" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="c" line="909" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="909" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                   <node name="=" line="910" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="endpos" line="910" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="readpos" line="910" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </statement_node>
                                 <statement_node name="return" line="911" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                   <node name="=" line="911" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="ttype" line="911" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="TT_EOF" line="911" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </statement_node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                               <node name="=" line="913" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                 <node name="prevc" line="913" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="c" line="913" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="return" line="915" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                           <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                             <node name="nextToken" line="915" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="if" line="916" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                         <node name="&amp;&amp;" line="916" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                           <node name="==" line="916" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                             <node name="c" line="916" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                               <node name="slashSlash" line="916" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="1" line="916" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                           </node>
                           <node name="slashSlashCommentsP" line="916" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="while" line="917" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                             <node name="&amp;&amp;" line="917" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                               <node name="&amp;&amp;" line="917" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                 <node name="!=" line="917" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                   <node name="=" line="917" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                     <node name="c" line="917" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                       <node name="read" line="917" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                       </node>
                                     </node>
                                   </node>
                                   <node name="&#039;\n&#039;" line="917" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                                 <node name="!=" line="917" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                   <node name="c" line="917" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="&#039;\r&#039;" line="917" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                   </node>
                                 </node>
                               </node>
                               <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                 <node name="c" line="917" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="0" line="917" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                 </node>
                               </node>
                             </node>
                             <statement_node name="EMPTY_STATEMENT" line="0" instruction_class="EMPTY_STATEMENT" instruction="EMPTY_STATEMENT">
                             </statement_node>
                           </statement_node>
                           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                             <node name="=" line="918" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                               <node name="peekc" line="918" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="c" line="918" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </statement_node>
                           <statement_node name="return" line="919" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                               <node name="nextToken" line="919" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                               </node>
                             </node>
                           </statement_node>
                         </statement_node>
                         <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                           <statement_node name="if" line="922" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                             <node name="!=" line="922" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                               <node name="&amp;" line="922" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                                 <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                                   <node name="ct" line="922" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                                     <node name="slashSlash" line="922" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="0" line="922" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                                 <node name="CT_COMMENT" line="922" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                               <node name="0" line="922" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                               </node>
                             </node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="while" line="923" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                                 <node name="&amp;&amp;" line="923" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                   <node name="&amp;&amp;" line="923" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                                     <node name="!=" line="923" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                       <node name="=" line="923" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                         <node name="c" line="923" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                         </node>
                                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                           <node name="read" line="923" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                           </node>
                                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                           </node>
                                         </node>
                                       </node>
                                       <node name="&#039;\n&#039;" line="923" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                     <node name="!=" line="923" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                                       <node name="c" line="923" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="&#039;\r&#039;" line="923" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                                       </node>
                                     </node>
                                   </node>
                                   <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                                     <node name="c" line="923" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="0" line="923" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                                 <statement_node name="EMPTY_STATEMENT" line="0" instruction_class="EMPTY_STATEMENT" instruction="EMPTY_STATEMENT">
                                 </statement_node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="924" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="peekc" line="924" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="c" line="924" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="return" line="925" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                                   <node name="nextToken" line="925" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="927" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="peekc" line="927" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="c" line="927" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                                 <node name="=" line="929" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="endpos" line="929" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="-" line="929" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="readpos" line="929" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="2" line="929" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                               <statement_node name="return" line="930" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                                 <node name="=" line="930" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                                   <node name="ttype" line="930" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                                     <node name="slashSlash" line="930" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="0" line="930" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                                     </node>
                                   </node>
                                 </node>
                               </statement_node>
                             </statement_node>
                           </statement_node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="936" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="936" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="&amp;" line="936" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                 <node name="ctype" line="936" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CT_COMMENT" line="936" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="0" line="936" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="while" line="937" instruction_class="LOOP_STATEMENT" instruction="WHILE_STATEMENT">
                 <node name="&amp;&amp;" line="937" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                   <node name="&amp;&amp;" line="937" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="!=" line="937" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="=" line="937" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="c" line="937" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="read" line="937" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                       <node name="&#039;\n&#039;" line="937" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                     <node name="!=" line="937" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="c" line="937" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="&#039;\r&#039;" line="937" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                   </node>
                   <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                     <node name="c" line="937" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0" line="937" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="EMPTY_STATEMENT" line="0" instruction_class="EMPTY_STATEMENT" instruction="EMPTY_STATEMENT">
                 </statement_node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="938" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="peekc" line="938" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="c" line="938" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="POST_INCREMENT_EXPRESSION" line="0" instruction_class="POST_INCREMENT_EXPRESSION" instruction="POST_INCREMENT_EXPRESSION">
                   <node name="lineno" line="939" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="return" line="940" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="nextToken" line="940" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="944" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="endpos" line="944" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="944" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="readpos" line="944" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="1" line="944" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="return" line="945" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="=" line="945" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ttype" line="945" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="c" line="945" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="951" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="951" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="nextChar" line="951" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <node name="throws" line="951" instruction_class="throws" instruction="throws">
           <node name="IOException" line="951" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="952" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="pushedBack" line="952" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="953" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="IllegalStateException" line="953" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="&quot;can&#039;t read char when a token has been pushed back&quot;" line="953" instruction_class="LITERAL" instruction="STRING_LITERAL">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="955" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="955" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="peekc" line="955" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="NEED_CHAR" line="955" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="return" line="956" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="read" line="956" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                 <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                 </node>
                 <node name="int" line="958" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                 </node>
                 <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                   <node name="ch" line="958" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="peekc" line="958" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="959" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="peekc" line="959" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="NEED_CHAR" line="959" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="return" line="960" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
                 <node name="ch" line="960" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="966" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="pushCharBack" line="966" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="966" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="ch" line="966" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <node name="throws" line="966" instruction_class="throws" instruction="throws">
           <node name="IOException" line="966" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="967" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="pushedBack" line="967" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="968" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="IllegalStateException" line="968" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="&quot;can&#039;t push back char when a token has been pushed back&quot;" line="968" instruction_class="LITERAL" instruction="STRING_LITERAL">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="970" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="970" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="peekc" line="970" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="NEED_CHAR" line="970" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="unread" line="971" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="ch" line="971" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="unread" line="973" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="peekc" line="973" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="974" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="peekc" line="974" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="NEED_CHAR" line="974" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="unread" line="975" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="ch" line="975" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="984" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setSlashStarTokens" line="984" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="984" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="slashStar" line="984" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="984" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="starSlash" line="984" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="985" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="985" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="slashStar" line="985" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="985" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="starSlash" line="985" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="985" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="986" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="IllegalArgumentException" line="986" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="+" line="986" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="+" line="986" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="+" line="986" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="+" line="986" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="&quot;SlashStar and StarSlash tokens must be of same length: &#039;&quot;" line="986" instruction_class="LITERAL" instruction="STRING_LITERAL">
                               </node>
                               <node name="slashStar" line="986" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="&quot;&#039; &#039;&quot;" line="986" instruction_class="LITERAL" instruction="STRING_LITERAL">
                             </node>
                           </node>
                           <node name="starSlash" line="986" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="&quot;&#039;&quot;" line="986" instruction_class="LITERAL" instruction="STRING_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="988" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="||" line="988" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="&lt;" line="988" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="slashStar" line="988" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="988" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="1" line="988" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="&gt;" line="988" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="slashStar" line="988" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="988" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="2" line="988" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="989" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="IllegalArgumentException" line="989" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="+" line="989" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="+" line="989" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="+" line="989" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="+" line="989" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="&quot;SlashStar and StarSlash tokens must be of length 1 or 2: &#039;&quot;" line="989" instruction_class="LITERAL" instruction="STRING_LITERAL">
                               </node>
                               <node name="slashStar" line="989" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="&quot;&#039; &#039;&quot;" line="989" instruction_class="LITERAL" instruction="STRING_LITERAL">
                             </node>
                           </node>
                           <node name="starSlash" line="989" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="&quot;&#039;&quot;" line="989" instruction_class="LITERAL" instruction="STRING_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="991" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                 </node>
                 <node name="slashStar" line="991" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="slashStar" line="991" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="toCharArray" line="991" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="992" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                 </node>
                 <node name="starSlash" line="992" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="starSlash" line="992" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="toCharArray" line="992" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="commentChar" line="993" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                       </node>
                       <node name="slashStar" line="993" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="0" line="993" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1000" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setSlashSlashToken" line="1000" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="1000" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="slashSlash" line="1000" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="1001" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="||" line="1001" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="&lt;" line="1001" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="slashSlash" line="1001" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="1001" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="1" line="1001" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="&gt;" line="1001" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                     <node name="slashSlash" line="1001" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="length" line="1001" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
                 <node name="2" line="1001" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="throw" line="1002" instruction_class="CONTROLFLOW_STATEMENT" instruction="EXCEPTION_THROW">
                 <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                   <node name="IllegalArgumentException" line="1002" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="+" line="1002" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="+" line="1002" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="&quot;SlashSlash token must be of length 1 or 2: &#039;&quot;" line="1002" instruction_class="LITERAL" instruction="STRING_LITERAL">
                           </node>
                           <node name="slashSlash" line="1002" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="&quot;&#039;&quot;" line="1002" instruction_class="LITERAL" instruction="STRING_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="1004" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                 <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                 </node>
                 <node name="slashSlash" line="1004" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="slashSlash" line="1004" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="toCharArray" line="1004" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
               <node name="commentChar" line="1005" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                   <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="THIS" line="0" instruction_class="THIS" instruction="THIS">
                       </node>
                       <node name="slashSlash" line="1005" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="0" line="1005" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1019" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="pushBack" line="1019" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="1020" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="!=" line="1020" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="ttype" line="1020" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="TT_NOTHING" line="1020" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
               <node name="=" line="1021" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                 <node name="pushedBack" line="1021" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="true" line="1021" instruction_class="LITERAL" instruction="BOOLEAN_LITERAL">
                 </node>
               </node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1029" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="1029" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="lineno" line="1029" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="1030" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="lineno" line="1030" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1040" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="1040" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getStartPosition" line="1040" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="1041" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="startpos" line="1041" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1046" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="setStartPosition" line="1046" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="1046" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="p" line="1046" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="1047" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="startpos" line="1047" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="p" line="1047" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1056" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="1056" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getEndPosition" line="1056" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="1057" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="endpos" line="1057" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1063" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="VOID" line="0" instruction_class="VOID" instruction="VOID">
         </node>
         <node name="consumeGreedy" line="1063" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="1063" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="greedyToken" line="1063" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="1064" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="1064" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="greedyToken" line="1064" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="1064" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="sval" line="1064" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="1064" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="pushBack" line="1065" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                   <node name="setStartPosition" line="1066" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                     <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                       <node name="+" line="1066" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="getStartPosition" line="1066" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="greedyToken" line="1066" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="length" line="1066" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1067" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="sval" line="1067" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="sval" line="1067" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="substring" line="1067" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                           <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                             <node name="greedyToken" line="1067" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="length" line="1067" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                           <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="1080" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="String" line="1080" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
         </node>
         <node name="toString" line="1080" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="String" line="1081" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="ret" line="1081" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="switch" line="1082" instruction_class="CONDITIONAL_STATEMENT" instruction="SWITCH_STATEMENT">
             <node name="ttype" line="1082" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="case" line="1083" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                 <node name="TT_EOF" line="1083" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1084" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ret" line="1084" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="&quot;EOF&quot;" line="1084" instruction_class="LITERAL" instruction="STRING_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="break" line="1085" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
               </statement_node>
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="case" line="1086" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                 <node name="TT_EOL" line="1086" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1087" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ret" line="1087" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="&quot;EOL&quot;" line="1087" instruction_class="LITERAL" instruction="STRING_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="break" line="1088" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
               </statement_node>
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="case" line="1089" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                 <node name="TT_WORD" line="1089" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1090" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ret" line="1090" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="sval" line="1090" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="break" line="1091" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
               </statement_node>
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="case" line="1092" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                 <node name="TT_NUMBER" line="1092" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1093" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ret" line="1093" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="1093" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="&quot;n=&quot;" line="1093" instruction_class="LITERAL" instruction="STRING_LITERAL">
                     </node>
                     <node name="nval" line="1093" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </statement_node>
               <statement_node name="break" line="1094" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
               </statement_node>
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="case" line="1095" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
                 <node name="TT_NOTHING" line="1095" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="1096" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="ret" line="1096" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="&quot;NOTHING&quot;" line="1096" instruction_class="LITERAL" instruction="STRING_LITERAL">
                   </node>
                 </node>
               </statement_node>
               <statement_node name="break" line="1097" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
               </statement_node>
             </node>
             <node name="SWITCH_BLOCK_STATEMENT_GROUP" line="0" instruction_class="SWITCH_BLOCK_STATEMENT_GROUP" instruction="SWITCH_BLOCK_STATEMENT_GROUP">
               <node name="default" line="1098" instruction_class="CONDITIONAL_STATEMENT" instruction="CASE_STATEMENT">
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
                   <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
                   </node>
                   <node name="char" line="1099" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
                     <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
                       <node name="s" line="1099" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
                       <node name="char" line="1099" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="3" line="1099" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="1100" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                       <node name="s" line="1100" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="0" line="1100" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                     <node name="=" line="1100" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                         <node name="s" line="1100" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="2" line="1100" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="&#039;\&#039;&#039;" line="1100" instruction_class="LITERAL" instruction="CHARACTER_LITERAL">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="1101" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                       <node name="s" line="1101" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="1" line="1101" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                       </node>
                     </node>
                     <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                       <node name="char" line="1101" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="ttype" line="1101" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="1102" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="ret" line="1102" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="UNQUALIFIED_CLASS_INSTANCE_CREATION" line="0" instruction_class="UNQUALIFIED_CLASS_INSTANCE_CREATION" instruction="UNQUALIFIED_CLASS_INSTANCE_CREATION">
                       <node name="String" line="1102" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="s" line="1102" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
                 <statement_node name="break" line="1103" instruction_class="CONTROLFLOW_STATEMENT" instruction="BREAK_STATEMENT">
                 </statement_node>
               </statement_node>
             </node>
           </statement_node>
           <statement_node name="return" line="1106" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="+" line="1106" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
               <node name="+" line="1106" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="+" line="1106" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="&quot;Token[&quot;" line="1106" instruction_class="LITERAL" instruction="STRING_LITERAL">
                   </node>
                   <node name="ret" line="1106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="&quot;], line &quot;" line="1106" instruction_class="LITERAL" instruction="STRING_LITERAL">
                 </node>
               </node>
               <node name="lineno" line="1106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
     </node>
   </class_statement_node>
 </node>
</srcfile>