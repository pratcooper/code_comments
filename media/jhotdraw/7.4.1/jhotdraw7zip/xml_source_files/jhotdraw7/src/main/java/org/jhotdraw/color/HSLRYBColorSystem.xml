<?xml version="1.0" ?>
<srcfile name="HSLRYBColorSystem.java" file_path="/Users/valerio/Research/Code/Source Code Comments Classification/comments_classification/media/jhotdraw/7.4.1/jhotdraw7zip/extracted/jhotdraw7/src/main/java/org/jhotdraw/color/HSLRYBColorSystem.java" >
 <node name="COMPILATION_UNIT" line="0" instruction_class="COMPILATION_UNIT" instruction="COMPILATION_UNIT">
   <node name="PACKAGE_DECLARATION" line="0" instruction_class="KEYWORD" instruction="PACKAGE_KEYWORD">
     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
         <node name="org" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="jhotdraw" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
       </node>
       <node name="color" line="14" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
       </node>
     </node>
   </node>
   <class_statement_node name="CLASS_DECLARATION" line="0" instruction_class="CLASS_DECLARATION" instruction="CLASS_KEYWORD">
     <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
       <node name="public" line="24" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
       </node>
     </node>
     <node name="HSLRYBColorSystem" line="24" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
     </node>
     <node name="extends" line="24" instruction_class="KEYWORD" instruction="INHERITANCE_KEYWORD">
       <node name="AbstractColorSystem" line="24" instruction_class="TYPE" instruction="CLASS_OR_INTERFACE_TYPE">
       </node>
     </node>
     <node name="CLASS_BODY" line="0" instruction_class="CLASS_BODY" instruction="CLASS_BODY">
       <method_statement_node name="CONSTRUCTOR_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="CONSTRUCTOR_METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="28" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="HSLRYBColorSystem" line="28" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="CONSTRUCTOR_BODY" line="0" instruction_class="CONSTRUCTOR_BODY" instruction="CONSTRUCTOR_BODY">
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="31" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="31" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="toRGB" line="31" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="LAST_FORMAL_PARAMETER" line="0" instruction_class="LAST_FORMAL_PARAMETER" instruction="LAST_FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="31" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="components" line="31" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="32" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="hue" line="32" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="32" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="32" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="33" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="saturation" line="33" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="33" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="1" line="33" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="34" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="lightness" line="34" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="34" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="2" line="34" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="37" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="hue" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="37" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="hue" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                   <node name="float" line="37" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="Math" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="floor" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="hue" line="37" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="38" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="38" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hue" line="38" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="38" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="39" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="hue" line="39" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="39" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="1f" line="39" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                     <node name="hue" line="39" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="42" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="42" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="saturation" line="42" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="1f" line="42" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="43" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="saturation" line="43" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="1f" line="43" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="44" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="44" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="saturation" line="44" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0f" line="44" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="45" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="saturation" line="45" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0f" line="45" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="48" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="48" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="lightness" line="48" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="1f" line="48" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="49" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="lightness" line="49" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="1f" line="49" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="50" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="50" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="lightness" line="50" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0f" line="50" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="51" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="lightness" line="51" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="0f" line="51" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="54" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="hueDeg" line="54" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="*" line="54" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="hue" line="54" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="360f" line="54" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="55" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="55" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hueDeg" line="55" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="55" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="+=" line="56" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="hueDeg" line="56" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="360f" line="56" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="60" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="hk" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="60" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="hue" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                   <node name="float" line="60" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                     <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                       <node name="Math" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="floor" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                       <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                         <node name="hue" line="60" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="61" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="61" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="hueDeg" line="61" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="120f" line="61" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="/=" line="62" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="hk" line="62" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="2f" line="62" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="63" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="63" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="hueDeg" line="63" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="160f" line="63" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="64" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="hk" line="64" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="+" line="64" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                       <node name="/" line="64" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="*" line="64" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="-" line="64" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="hk" line="64" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="/" line="64" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="120f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="360f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                           <node name="3f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                           </node>
                         </node>
                         <node name="2f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                         </node>
                       </node>
                       <node name="/" line="64" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="60f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                         </node>
                         <node name="360f" line="64" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="65" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="65" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="hueDeg" line="65" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="220f" line="65" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="66" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="hk" line="66" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="+" line="66" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="-" line="66" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="hk" line="66" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="/" line="66" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="160f" line="66" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                             <node name="360f" line="66" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                           </node>
                         </node>
                         <node name="/" line="66" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="120f" line="66" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                           </node>
                           <node name="360f" line="66" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="if" line="67" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="&lt;" line="67" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                     <node name="hueDeg" line="67" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="280f" line="67" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="68" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="hk" line="68" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="+" line="68" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="-" line="68" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="hk" line="68" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="/" line="68" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="220f" line="68" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="360f" line="68" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                           <node name="/" line="68" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="180f" line="68" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                             <node name="360f" line="68" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="if" line="69" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="&lt;" line="69" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                       <node name="hueDeg" line="69" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="340f" line="69" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="70" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="hk" line="70" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="+" line="70" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="-" line="70" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="hk" line="70" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="/" line="70" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                 <node name="280f" line="70" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                 </node>
                                 <node name="360f" line="70" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                 </node>
                               </node>
                             </node>
                             <node name="/" line="70" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="240f" line="70" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="360f" line="70" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="72" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="hk" line="72" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="+" line="72" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="*" line="72" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="-" line="72" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="hk" line="72" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="/" line="72" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="340f" line="72" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                   </node>
                                   <node name="360f" line="72" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                   </node>
                                 </node>
                               </node>
                               <node name="3f" line="72" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                             <node name="/" line="72" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="300f" line="72" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="360f" line="72" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="76" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="q" line="76" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="77" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="77" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="lightness" line="77" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0.5f" line="77" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="78" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="q" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="*" line="78" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                     <node name="lightness" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="+" line="78" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                       <node name="1f" line="78" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                       </node>
                       <node name="saturation" line="78" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="80" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="q" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="-" line="80" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="+" line="80" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                       <node name="lightness" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="saturation" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="*" line="80" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="lightness" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="saturation" line="80" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="82" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="p" line="82" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="82" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="*" line="82" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                   <node name="2f" line="82" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                   <node name="lightness" line="82" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="q" line="82" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="86" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="red" line="86" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="+" line="86" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="hk" line="86" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="/" line="86" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                   <node name="1f" line="86" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                   <node name="3f" line="86" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="87" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="green" line="87" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="hk" line="87" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="88" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="blue" line="88" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="-" line="88" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                 <node name="hk" line="88" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="/" line="88" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                   <node name="1f" line="88" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                   <node name="3f" line="88" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="90" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="90" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="red" line="90" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="90" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="91" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="red" line="91" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="91" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="red" line="91" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="91" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="93" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="93" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="green" line="93" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="93" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="94" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="green" line="94" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="94" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="green" line="94" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="94" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="96" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="96" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="blue" line="96" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="0" line="96" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="97" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="blue" line="97" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="97" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="blue" line="97" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="97" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="99" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="99" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="red" line="99" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="1" line="99" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="100" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="red" line="100" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="-" line="100" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="red" line="100" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="100" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="102" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="102" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="green" line="102" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="1" line="102" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="103" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="green" line="103" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="-" line="103" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="green" line="103" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="103" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="105" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&gt;" line="105" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="blue" line="105" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="1" line="105" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="106" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="blue" line="106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="-" line="106" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="blue" line="106" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="1f" line="106" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="109" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="109" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="red" line="109" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="109" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="1f" line="109" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
                 <node name="6f" line="109" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="110" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="red" line="110" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="110" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="p" line="110" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="*" line="110" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="*" line="110" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="-" line="110" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="q" line="110" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="p" line="110" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="6" line="110" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="red" line="110" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="111" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="111" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="red" line="111" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0.5f" line="111" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="112" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="red" line="112" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="q" line="112" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="113" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="113" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="red" line="113" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="/" line="113" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                     <node name="2f" line="113" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                     <node name="3f" line="113" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="114" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="red" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="+" line="114" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="p" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="*" line="114" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="*" line="114" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="-" line="114" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="q" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="p" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="6" line="114" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                           <node name="-" line="114" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="/" line="114" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="2f" line="114" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="3f" line="114" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                             <node name="red" line="114" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="116" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="red" line="116" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="p" line="116" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="118" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="118" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="green" line="118" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="118" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="1f" line="118" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
                 <node name="6f" line="118" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="119" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="green" line="119" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="119" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="p" line="119" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="*" line="119" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="*" line="119" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="-" line="119" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="q" line="119" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="p" line="119" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="6" line="119" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="green" line="119" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="120" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="120" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="green" line="120" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0.5f" line="120" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="121" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="green" line="121" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="q" line="121" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="122" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="122" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="green" line="122" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="/" line="122" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                     <node name="2f" line="122" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                     <node name="3f" line="122" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="123" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="green" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="+" line="123" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="p" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="*" line="123" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="*" line="123" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="-" line="123" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="q" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="p" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="6" line="123" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                           <node name="-" line="123" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="/" line="123" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="2f" line="123" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="3f" line="123" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                             <node name="green" line="123" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="125" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="green" line="125" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="p" line="125" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="if" line="128" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="&lt;" line="128" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
               <node name="blue" line="128" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="128" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="1f" line="128" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
                 <node name="6f" line="128" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="129" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="blue" line="129" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="+" line="129" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                     <node name="p" line="129" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="*" line="129" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="*" line="129" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="-" line="129" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="q" line="129" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="p" line="129" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                         <node name="6" line="129" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                       <node name="blue" line="129" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="130" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&lt;" line="130" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="blue" line="130" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0.5f" line="130" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="131" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="blue" line="131" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="q" line="131" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="132" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="&lt;" line="132" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="blue" line="132" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="/" line="132" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                     <node name="2f" line="132" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                     <node name="3f" line="132" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                     </node>
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="133" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="blue" line="133" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="+" line="133" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="p" line="133" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="*" line="133" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="*" line="133" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="-" line="133" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="q" line="133" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="p" line="133" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                             <node name="6" line="133" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                             </node>
                           </node>
                           <node name="-" line="133" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="/" line="133" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="2f" line="133" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                               <node name="3f" line="133" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                             <node name="blue" line="133" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="135" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="blue" line="135" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="p" line="135" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="139" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="rgb" line="139" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="|" line="140" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                 <node name="|" line="139" instruction_class="OPERATOR" instruction="BITWISE_OPERATOR">
                   <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                     <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                       <node name="int" line="139" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="*" line="139" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="red" line="139" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="255" line="139" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                     <node name="16" line="139" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                   <node name="LEFT_SHIFT" line="0" instruction_class="OPERATOR" instruction="SHIFT_OPERATOR">
                     <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                       <node name="int" line="140" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                       </node>
                       <node name="*" line="140" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="green" line="140" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="255" line="140" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                       </node>
                     </node>
                     <node name="8" line="140" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
                 <node name="CAST" line="0" instruction_class="CAST" instruction="CAST">
                   <node name="int" line="141" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                   </node>
                   <node name="*" line="141" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                     <node name="blue" line="141" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="255" line="141" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="return" line="144" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="rgb" line="144" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="147" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
           <node name="float" line="147" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
           </node>
         </node>
         <node name="toComponents" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="147" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="red" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="147" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="green" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="int" line="147" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="blue" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
           <node name="FORMAL_PARAMETER" line="0" instruction_class="FORMAL_PARAMETER" instruction="FORMAL_PARAMETER">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="ARRAY_OF" line="0" instruction_class="ARRAY_OF" instruction="ARRAY_OF">
               <node name="float" line="147" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
               </node>
             </node>
             <node name="components" line="147" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </node>
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="if" line="148" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="||" line="148" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
               <node name="==" line="148" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="components" line="148" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="null" line="148" instruction_class="LITERAL" instruction="NULL_LITERAL">
                 </node>
               </node>
               <node name="!=" line="148" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="components" line="148" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="length" line="148" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="3" line="148" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="149" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="components" line="149" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="NEW_ARRAY" line="0" instruction_class="NEW_ARRAY" instruction="NEW_ARRAY">
                     <node name="float" line="149" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
                     </node>
                     <node name="3" line="149" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                     </node>
                   </node>
                 </node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="152" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="r" line="152" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="152" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="red" line="152" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="255f" line="152" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="153" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="g" line="153" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="153" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="green" line="153" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="255f" line="153" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="154" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="b" line="154" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="154" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="blue" line="154" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="255f" line="154" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="156" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="max" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="Math" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="max" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="Math" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="max" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="r" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="g" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                     <node name="b" line="156" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="157" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="min" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                 <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                   <node name="Math" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="min" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                   <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                     <node name="CALL" line="0" instruction_class="CALL" instruction="CALL">
                       <node name="SELECT" line="0" instruction_class="SELECT" instruction="SELECT">
                         <node name="Math" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="min" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="ARGUMENTS" line="0" instruction_class="ARGUMENTS" instruction="ARGUMENTS">
                         <node name="EXPRESSION_LIST" line="0" instruction_class="EXPRESSION_LIST" instruction="EXPRESSION_LIST">
                           <node name="r" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="g" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                     <node name="b" line="157" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                   </node>
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="159" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="hue" line="159" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="160" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="saturation" line="160" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="LOCAL_VARIABLE_DECLARATION" line="0" instruction_class="LOCAL_VARIABLE_DECLARATION" instruction="LOCAL_VARIABLE_DECLARATION">
             <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
             </node>
             <node name="float" line="161" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
             </node>
             <node name="VARIABLE_DECLARATOR" line="0" instruction_class="VARIABLE_DECLARATOR" instruction="VARIABLE_DECLARATOR">
               <node name="luminance" line="161" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="163" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="163" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="max" line="163" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="min" line="163" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="164" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="hue" line="164" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="164" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="165" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="&amp;&amp;" line="165" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                 <node name="==" line="165" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="max" line="165" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="r" line="165" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                   <node name="g" line="165" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="b" line="165" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="166" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="hue" line="166" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="/" line="166" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="*" line="166" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                         <node name="120f" line="166" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                         </node>
                         <node name="-" line="166" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="g" line="166" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="b" line="166" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                       <node name="-" line="166" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="max" line="166" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="min" line="166" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="if" line="167" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                 <node name="==" line="167" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                   <node name="max" line="167" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="r" line="167" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                   <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                     <node name="=" line="168" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                       <node name="hue" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="+" line="168" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="/" line="168" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                           <node name="*" line="168" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                             <node name="20f" line="168" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                             <node name="-" line="168" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="g" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                               <node name="b" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                               </node>
                             </node>
                           </node>
                           <node name="-" line="168" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="max" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="min" line="168" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                           </node>
                         </node>
                         <node name="360f" line="168" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                         </node>
                       </node>
                     </node>
                   </statement_node>
                 </statement_node>
                 <statement_node name="if" line="169" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                   <node name="&amp;&amp;" line="169" instruction_class="OPERATOR" instruction="CONDITIONAL_OPERATOR">
                     <node name="==" line="169" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="max" line="169" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="g" line="169" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                       <node name="r" line="169" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="b" line="169" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                   </node>
                   <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                     <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                       <node name="=" line="170" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                         <node name="hue" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="+" line="170" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="+" line="170" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="/" line="170" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                               <node name="*" line="170" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                 <node name="40f" line="170" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                 </node>
                                 <node name="-" line="170" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                   <node name="b" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="r" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                               <node name="-" line="170" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="max" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                                 <node name="min" line="170" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                 </node>
                               </node>
                             </node>
                             <node name="120f" line="170" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                           </node>
                           <node name="40f" line="170" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                           </node>
                         </node>
                       </node>
                     </statement_node>
                   </statement_node>
                   <statement_node name="if" line="171" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                     <node name="==" line="171" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
                       <node name="max" line="171" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                       <node name="g" line="171" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                       </node>
                     </node>
                     <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                       <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                         <node name="=" line="172" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                           <node name="hue" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="+" line="172" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                             <node name="+" line="172" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="/" line="172" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                 <node name="*" line="172" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="60f" line="172" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                   </node>
                                   <node name="-" line="172" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="b" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="r" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                                 <node name="-" line="172" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                   <node name="max" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                   <node name="min" line="172" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                   </node>
                                 </node>
                               </node>
                               <node name="120f" line="172" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                             <node name="40f" line="172" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                             </node>
                           </node>
                         </node>
                       </statement_node>
                     </statement_node>
                     <statement_node name="if" line="173" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
                       <node name="GREATER_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                         <node name="g" line="173" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="r" line="173" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="174" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="hue" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="+" line="174" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="+" line="174" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="/" line="174" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="*" line="174" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                     <node name="60f" line="174" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                     </node>
                                     <node name="-" line="174" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                       <node name="r" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="g" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                   <node name="-" line="174" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="max" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="min" line="174" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                                 <node name="240f" line="174" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                 </node>
                               </node>
                               <node name="40f" line="174" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                       <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                         <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                           <node name="=" line="176" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                             <node name="hue" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                             </node>
                             <node name="+" line="176" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                               <node name="+" line="176" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                 <node name="/" line="176" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                   <node name="*" line="176" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                                     <node name="60f" line="176" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                     </node>
                                     <node name="-" line="176" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                       <node name="r" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                       <node name="g" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                       </node>
                                     </node>
                                   </node>
                                   <node name="-" line="176" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                                     <node name="max" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                     <node name="min" line="176" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                                     </node>
                                   </node>
                                 </node>
                                 <node name="240f" line="176" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                                 </node>
                               </node>
                               <node name="40f" line="176" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                               </node>
                             </node>
                           </node>
                         </statement_node>
                       </statement_node>
                     </statement_node>
                   </statement_node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="179" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="luminance" line="179" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="/" line="179" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="+" line="179" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                   <node name="max" line="179" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="min" line="179" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                 </node>
                 <node name="2f" line="179" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="if" line="181" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
             <node name="==" line="181" instruction_class="OPERATOR" instruction="EQUALITY_OPERATOR">
               <node name="max" line="181" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
               <node name="min" line="181" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
             <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
               <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                 <node name="=" line="182" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                   <node name="saturation" line="182" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                   </node>
                   <node name="0" line="182" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                   </node>
                 </node>
               </statement_node>
             </statement_node>
             <statement_node name="if" line="183" instruction_class="CONDITIONAL_STATEMENT" instruction="IF_STATEMENT">
               <node name="LESS_THAN_OR_EQUAL_TO" line="0" instruction_class="OPERATOR" instruction="RELATIONAL_OPERATOR">
                 <node name="luminance" line="183" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0.5f" line="183" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="184" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="saturation" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="/" line="184" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="-" line="184" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="max" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="min" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="+" line="184" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="max" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="min" line="184" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
               <statement_node name="BLOCK" line="0" instruction_class="BLOCK" instruction="BLOCK">
                 <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
                   <node name="=" line="186" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
                     <node name="saturation" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                     </node>
                     <node name="/" line="186" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                       <node name="-" line="186" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="max" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                         <node name="min" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                         </node>
                       </node>
                       <node name="-" line="186" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                         <node name="2" line="186" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                         </node>
                         <node name="+" line="186" instruction_class="OPERATOR" instruction="ADDITIVE_OPERATOR">
                           <node name="max" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                           <node name="min" line="186" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                           </node>
                         </node>
                       </node>
                     </node>
                   </node>
                 </statement_node>
               </statement_node>
             </statement_node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="189" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="189" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="0" line="189" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="/" line="189" instruction_class="OPERATOR" instruction="MULTIPLICATIVE_OPERATOR">
                 <node name="hue" line="189" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="360f" line="189" instruction_class="LITERAL" instruction="FLOATING_POINT_LITERAL">
                 </node>
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="190" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="190" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="1" line="190" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="saturation" line="190" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="EXPRESSION_STATEMENT" line="0" instruction_class="EXPRESSION_STATEMENT" instruction="EXPRESSION_STATEMENT">
             <node name="=" line="191" instruction_class="OPERATOR" instruction="ASSIGNEMENT_OPERATOR">
               <node name="ARRAY_ACCESS" line="0" instruction_class="ARRAY_ACCESS" instruction="ARRAY_ACCESS">
                 <node name="components" line="191" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
                 </node>
                 <node name="2" line="191" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
                 </node>
               </node>
               <node name="luminance" line="191" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
               </node>
             </node>
           </statement_node>
           <statement_node name="return" line="193" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="components" line="193" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
       <method_statement_node name="METHOD_DECLARATION" line="0" instruction_class="METHOD_DECLARATION" instruction="METHOD_DECLARATION">
         <node name="MODIFIERS" line="0" instruction_class="MODIFIERS" instruction="MODIFIERS">
           <node name="public" line="196" instruction_class="MODIFIER" instruction="ACCESS_LEVEL_MODIFIER">
           </node>
         </node>
         <node name="int" line="196" instruction_class="TYPE" instruction="PRIMITIVE_TYPE">
         </node>
         <node name="getComponentCount" line="196" instruction_class="IDENTIFIER" instruction="IDENTIFIER">
         </node>
         <node name="FORMAL_PARAMETERS" line="0" instruction_class="FORMAL_PARAMETERS" instruction="FORMAL_PARAMETERS">
         </node>
         <statement_node name="METHOD_BODY" line="0" instruction_class="METHOD_BODY" instruction="METHOD_BODY">
           <statement_node name="return" line="197" instruction_class="CONTROLFLOW_STATEMENT" instruction="RETURN_STATEMENT">
             <node name="3" line="197" instruction_class="LITERAL" instruction="INTEGER_LITERAL">
             </node>
           </statement_node>
         </statement_node>
       </method_statement_node>
     </node>
   </class_statement_node>
 </node>
</srcfile>